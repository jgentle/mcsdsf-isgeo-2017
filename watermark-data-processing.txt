======================================================================
Watermark Data Ingest Workflow

1) Load data
  IF: CSV
    Parse into JSON
  IF: JSON
    Use as is

2) Load GeoJSON
  - Requires conversion from any other format into WGS-84 GeoJSON.
    - Use GDAL
    - Use online resources
      FOSS: https://ogre.adc4gis.com/
      Proprietary: https://mygeodata.cloud/converter/shp-to-geojson)

3)

======================================================================

Integration Plan

- Use PCM Crossfilter as basis for dashboard.
- Replace graphs with Leaflet Map from Modflow+Mapping example.
- For now, forego using VueJS (can refactor into components later)
- Basic idea in prep of configurable reusable dashboard:

  1. Users login to app with various credentials
  2. Users create a dashboard configuration that includes:
    - NonGIS data sources (csv, json, DB, API, etc.)
      - System will need to do initial pull of data
      - Parse data and convert to JSON object
      - Save JSON object
      - User then configures data based on per key(header) values:
        -- Determines if the key will be used or not in the dashboard display (T/F)
        -- Provides unique name for key (or defaults to value in source)
        -- Defines data type (String, Integer, Boolean) for each key
        -- Identifies unit type (if applicable) for each key
        -- Identifies the "ID" key to link data with GIS data source
    - Geospatial data source (geojson/topojson)
      - May require conversion from shapefile using GDAL or online resource
        -- MUST be WGS84 regardless of original projection!
      - Validate GeoJson/Topojson
      - Confirm that "ID" key mapping correlates between GIS data and nonGIS data
    - Dashboard labelling, display, layout and style
      - User will need to provide any titles or popup info that needs to be displayed
      - User can select from some display options (sparkline type)
        -- Eventually this may be a per key configuration
      - User can select from some layout options (eventually)
      - User can select from some stylings (eventually)
  3. User saves configuration to DB along with parsed source data as a "Formulation".
  4. Dashboard then uses configuration (formulation) to populate a reusable method (class).

======================================================================

TODO:

- Setup basic code structures for user to generate formulation (standard input form)
- Setup functions to load, parse, validate and convert source data
  -- D3 has native support for csv, tsv, json, and custom formatter function for others
      https://github.com/d3/d3-dsv#dsvFormat
      http://learnjsdata.com/read_data.html
  -- Poppa Parse (CSV) - excellent error handling and async!
      http://papaparse.com/
  -- GDAL geospatial bindings and ogr2ogr in node:
      https://github.com/naturalatlas/node-gdal
      https://github.com/wavded/ogr2ogr
- Setup db collection to store formulation (mongodb for now)
  -- Could probably package up as a single massive json:
    a) convert nonGIS into JSON
    b) convert GIS into GeoJSON
    c) create config object as JSON
      * config object should allow for 'snapshot concept' to capture filter settings
    d) combine all 3 into a single 'formulation' JSON
      -- depends on size of data.
- Load formulation data from DB via selection dropdown in dashboard UI
  -- Users should be able to load formulations easily
- Execute dashboard generation code and populate dashboard with formulation data
- Use dashboard

REQUIREMENTS:

- All source data must pass validation to be used
  -- eventually real-time stream data may be integrated but not at this time
- GIS data must be reprojected into ESPG:4326 (WGS84)
- Dashboard components should be independently draggable and resizable (eventually)
  -- npm package 'draggable': https://github.com/bcherny/draggable
- Dashboard should also be able to snap into a unified RWD layout
- Dashboard should support multiple instances to facilitate multi-user or multi-formulation viewing
- Dashboard should be able to support multiple users (eventually)
  -- will leverage socket.io to do real-time updates
  -- these will need to be submitted to a facilitator who controls the common dashboard
  -- users will have a second custom view of the dashboard to manipulate
  -- changes can be submitted to the facilitator for publishing
  -- facilitator can determine if changes are applied or rejected
  -- all users see current state of common dashboard
  -- users can "pull" in state of common dashboard to update their own view
      "Update private dashboard to match common dashboard button"
- Dashboard needs to be easy to deploy and run (turn-key)
  -- dockerized?? (eventually yes)
- Dashboard should be fully cross-platform
- Dashboard should be mobile accessible
- Dashboard should be "Publishable"
  -- in single-user mode (or private dashboard mode) user can take a snapshot of the filter settings and save
  -- in multi-user mode, facilitator can take snapshot of common dashboard
  -- snapshots can be reloaded at any time
    --- this is basically a formulation with some predefined values for the crossfilter settings
  -- snapshots can be shared between users
  -- snapshots can be published as data
  -- snapshots can be exported as PDF
  -- snapshots can be exported as embeddable object
  -- snapshots can be loaded into Jupyter Notebooks

CONSTRAINTS:
  - Performance must be smooth
  - Use workers wherever possible to get off the main thread
  - Use server side processing whenever possible to ease load on browser
  - Only serve and render the data being viewed on screen at any given time

STUB CODES:

    generateFormulation() {
      // load nonGIS data
        -- separate util window
        // parse and validate nonGIS data
      // load GIS data
        -- separate util window
        // convert, parse and validate GIS data
      // data mapping configuration
        -- separate util window
        // expose keys/headers for configuration
          -- define displayed, name, data type, units, axis labels, etc.
      // general formulation configuration info
        -- fields in the main form (title, display, etc.)
      // collect input from formulation forms
      // returns formulation
      // save formulation
      // update dashboard dropdown list after save
    }

    listFormulations(user_id) {
      // looks up all formulations saved by user
      // populates dashboard dropdown for easy selection
      // selection from dropdown calls generateDashboard()
    }

    generateDashboard(formulation) {
      // define dashboard variables
      // load formulation
      // parse formulation object
      // populate variables from formulation
      // render map object
      // render crossfilter object
      // setup pub/sub event listeners between objects
      // take a snapshot (save state)
      // publish snapshot
      // cleanup and exit dashboard
    }


======================================================================

Interface Refs:

Mapping:
/Users/jgentle/Code/testbed/gis-leaflet-experiments
/Users/jgentle/Code/testbed/mapping

Modflow:
/Users/jgentle/Code/testbed/crossfilter-training/

Modflow + Mapping:
/Users/jgentle/Code/code_practices/javascript/d3-sketch

Crossfilter Dashboard:
/Users/jgentle/Code/code_practices/javascript/crossfilter/dashing-d3-leanpub-example
